#include "callbacks.h"

int statu = 1, opt = 1;

//+++++++++++++查找还没有使用的连接状态数组++++++++++++++++++++++++
void add_sockset(fd_set * sockset, int sockfd, int *user_link, int *userfd)
{
	int i;
	FD_ZERO(sockset);
	FD_SET(sockfd, sockset);
	for (i = 0; i < MAX_CLIENT; i++) {
		if (user_link[i] == 1) {
			FD_SET(userfd[i], sockset);
		}
	}
}

//++++++++++++++++好友列表+++++++++++++++++
GtkTreeModel *createModel()
{
	while (1) {
		int unline;
		int online;
		char sql[300];
		MYSQL *conn_ptr;

		MYSQL_RES *result;
		MYSQL_ROW row;

		conn_ptr = mysql_init(NULL);	//连接初始化
		conn_ptr = mysql_real_connect(conn_ptr, "localhost", "root", "123456", "myqq", 0, NULL, 0);
		if (!conn_ptr) {
			//char failed[15]="sqlfailed";
			//write(k->fd,failed,strlen(failed));
		} else {
			sprintf(sql, "select count(*) as title from usermsg where userstatu=1");
			//printf("%s\n",sql);
			mysql_query(conn_ptr, sql);

			result = mysql_store_result(conn_ptr);
			row = mysql_fetch_row(result);

			online = atoi(row[0]);
			mysql_free_result(result);
printf("在线人数是：%d\n",online);
			sprintf(sql, "select count(*) as title from usermsg where userstatu=0");
			//printf("%s\n",sql);
			mysql_query(conn_ptr, sql);

			result = mysql_store_result(conn_ptr);
			row = mysql_fetch_row(result);

			unline = atoi(row[0]);
			mysql_free_result(result);
		}

//		const gchar *files[] = { "./ico/apple-red.png", "./ico/apple-red.png",
//			"./ico/apple-red.png", "./ico/apple-red.png", "./ico/apple-red.png"
//		};

		const gchar *files[] = { "./ico/apple-red.png", "./ico/apple-red.png",
			"./ico/apple-red.png", "./ico/apple-red.png", "./ico/apple-red.png"
		};

		const gchar *file[] = { "./ico/gnome-gmush.png", "./ico/gnome-gmush.png",
			"./ico/gnome-gmush.png", "./ico/gnome-gmush.png",
			"./ico/gnome-gmush.png"
		};
		GtkWidget *cellView;
		GdkPixbuf *pixbuf;
		GtkTreeIter iter1, iter2;
//		GtkTreeStore *store1;
		gint i, j, s, k = 0;

		char li[2]=" ";
		char line[2][20];
		memset(line, 0, 40);
		strcpy(line[0], "在线好友");
		strcpy(line[1], "不在线好友");
//改
//		store1 = gtk_tree_store_new(2, GDK_TYPE_PIXBUF, G_TYPE_STRING);
		store1 = gtk_tree_store_new(2, G_TYPE_STRING, G_TYPE_STRING);
		cellView = gtk_cell_view_new();
		for (i = 0; i < 2; i++) {
//改
//			pixbuf = gdk_pixbuf_new_from_file(files[i], NULL);
			gtk_tree_store_append(store1, &iter1, NULL);
//改
//			gtk_tree_store_set(store1, &iter1, PIXBUF_COL, pixbuf, TEXT_COL, line[i], -1);
//printf("112233\n");
			gtk_tree_store_set(store1, &iter1,PIXBUF_COL,li, TEXT_COL, line[i], -1);
//printf("112233\n");
//改
//			gdk_pixbuf_unref(pixbuf);

			if (i == 0) {
				sprintf(sql, "select username from usermsg where userstatu=1");
				mysql_query(conn_ptr, sql);

				result = mysql_store_result(conn_ptr);
				row = mysql_fetch_row(result);
				if (online==0){
				gtk_tree_store_append(store1, &iter2, &iter1);
				gtk_tree_store_set(store1, &iter2, PIXBUF_COL,li, TEXT_COL,"暂无好友上线", -1);
				row = mysql_fetch_row(result);
				continue;
				}
				for (j = 0; j < online; j++) {
					s = rand() % 5;
printf("在线循环：%d次\n",j);
//改
//					pixbuf = gdk_pixbuf_new_from_file(file[i], NULL);
					//pixbuf = gtk_widget_render_icon(cellView,stocks[s],GTK_ICON_SIZE_BUTTON, NULL);
					gtk_tree_store_append(store1, &iter2, &iter1);
//改
//					gtk_tree_store_set(store1, &iter2, PIXBUF_COL, pixbuf, TEXT_COL, row[0], -1);
					gtk_tree_store_set(store1, &iter2, PIXBUF_COL,li, TEXT_COL, row[0], -1);
					row = mysql_fetch_row(result);
				}
				//online=unline;
//改
//				gdk_pixbuf_unref(pixbuf);
			} else {
				sprintf(sql, "select username from usermsg where userstatu=0");
				mysql_query(conn_ptr, sql);
				result = mysql_store_result(conn_ptr);
				row = mysql_fetch_row(result);
				if (unline==0){
				gtk_tree_store_append(store1, &iter2, &iter1);
				gtk_tree_store_set(store1, &iter2, PIXBUF_COL,li, TEXT_COL,"无人离线", -1);
				row = mysql_fetch_row(result);
				continue;
				}
				for (j = 0; j < unline; j++) {
					s = rand() % 5;
//改
//					pixbuf = gdk_pixbuf_new_from_file(file[i], NULL);
					//pixbuf = gtk_widget_render_icon(cellView,files[s],GTK_ICON_SIZE_BUTTON, NULL);
					gtk_tree_store_append(store1, &iter2, &iter1);
//改
//					gtk_tree_store_set(store1, &iter2, PIXBUF_COL, pixbuf, TEXT_COL, row[0], -1);
					gtk_tree_store_set(store1, &iter2, PIXBUF_COL,li, TEXT_COL, row[0], -1);
					row = mysql_fetch_row(result);
//改
//					gdk_pixbuf_unref(pixbuf);
				}
			}
		}

		return GTK_TREE_MODEL(store1);
	}
}

//+++++++++++++++++++++++++++++++++++++
static void combochange_log(const char *fmt, char *msg)
{
	GtkTextIter iter;
	GString *order_string;
	GtkTextMark *tmp_mark;

	GtkTextBuffer *buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(allwid.text_view));

	gtk_text_buffer_get_end_iter(buffer, &iter);
	gtk_text_buffer_insert(buffer,&iter,msg, -1);

	order_string = g_string_new("\n");
	gtk_text_buffer_insert(buffer, &iter,order_string->str, -1);
	g_string_free(order_string, TRUE);

//tmp_mark = gtk_text_buffer_create_mark (allwid.text_view, NULL, &iter, FALSE);
//gtk_text_view_scroll_mark_onscreen (GTK_TEXT_VIEW (text_view), tmp_mark);
//gtk_text_buffer_delete_mark (buffer, tmp_mark);

//g_free (msg);
}

//+++++++++++++++用户登陆验证信息++++++++++++++++++++++

void func_check(struct check *k)
{

	gdk_threads_enter();
	char sql[300];
	MYSQL *conn_ptr;

	MYSQL_RES *result;	/*result buffer */
	MYSQL_ROW row;		/*one row of the result */

	conn_ptr = mysql_init(NULL);	//连接初始化
	conn_ptr = mysql_real_connect(conn_ptr, "localhost", "root", "123456", "myqq", 0, NULL, 0);
	if (!conn_ptr) {
		char failed[15] = "sqlfailed";
		write(k->fd, failed, strlen(failed));
		usleep(150000);;
	} else {
		sprintf(sql, "select userid,userpwd,userstatu from usermsg where userid = %s and userpwd = '%s'", k->id, k->pwd);
		printf("%s\n", sql);
		mysql_query(conn_ptr, sql);

		if ((result = mysql_store_result(conn_ptr)) == NULL) {
			fprintf(stderr, "Fail to get the result.\n");
		}
		row = mysql_fetch_row(result);	/*fetching each row */
		if(row!=0){
		printf("!!!!!!!!!!\n");
//              mysql_free_result(result);

//              unsigned int mysql_ac;
//              printf("mysql_ac=%lu\n",mysql_ac);
//              mysql_ac=mysql_affected_rows(conn_ptr);
//              printf("%ul\n",mysql_ac);
			if (!strcmp(row[0],k->id) && !strcmp(row[1], k->pwd) && !atoi(row[2])) {
				memset(sql, 0,200);
				sprintf(sql, "select userip,userport,username from usermsg where userid = %d and userpwd = '%s'",atoi(k->id), k->pwd);
		printf("!@@@@\n");
				mysql_query(conn_ptr, sql);
				result = mysql_store_result(conn_ptr);
				row = mysql_fetch_row(result);
	printf("%s\n", sql);
				if ((strcmp(row[0],k->ip) != 0) || (strcmp(row[1], k->port) != 0)) {
	printf("aaaaaaaaaa\n");
					memset(sql,'\0', 300);
	printf("bbbbbbbbb\n");
					sprintf(sql, "update usermsg set userip='%s',userport='%s',userstatu=1 where userid = %s and userpwd = '%s'", k->ip, k->port,k->id, k->pwd);
					printf("%s\n", sql);
					mysql_query(conn_ptr, sql);
					char delu[100];
					memset(delu, '\0', 100);
printf("rrr\n");
					sprintf(delu, "delu:%s:%s:%s",k->id, k->ip, k->port);
					for (j = 0; j < MAX_CLIENT; j++) {
						if ((user_link[j] == 1)
						    && (userfd[j] != k->fd)) {
							write(userfd[j], delu, strlen(delu));
							//printf("userfd%d=%d\n",j,userfd[j]);
						}
					}
				} else {
	printf("cccccccccc\n");
					memset(sql,'\0', 300);
	printf("dddddddddd\n");
					sprintf(sql, "update usermsg set userstatu=1 where userid = %s and userpwd = '%s'",atoi(k->id), k->pwd);
					mysql_query(conn_ptr, sql);
		printf("!!!!!!!!!!%s\n",sql);
					char delu[100];
					memset(delu, '\0', 100);
printf("rrr\n");
					sprintf(delu, "delu:%s:%s:%s", k->id, k->ip, k->port);
					for (j = 0; j < MAX_CLIENT; j++) {
						if ((user_link[j] == 1)
						    && (userfd[j] != k->fd)) {
							write(userfd[j], delu, strlen(delu));
							//printf("userfd%d=%d\n",j,userfd[j]);
						}
					}
				}
				char name[40];
				strcpy(name, row[2]);
				strcat(name, "  :已登陆");
//      gdk_threads_enter();
				combochange_log("%s", name);
//s     gdk_threads_leave();

				mysql_free_result(result);
				memset(sql, 0, 300);
				sprintf(sql, "select count(*) as title from usermsg");
				mysql_query(conn_ptr, sql);
				result = mysql_store_result(conn_ptr);
				row = mysql_fetch_row(result);
				printf("title=%s\n", row[0]);
				char ucount[15];
				sprintf(ucount, "ucount:%s", row[0]);
				write(k->fd, ucount, strlen(ucount));
				usleep(150000);;
				mysql_free_result(result);
				sprintf(sql, "select username,userid,userip,userport,userstatu,usermail from usermsg where userid = %d and userpwd = '%s'",atoi(k->id), k->pwd);
				mysql_query(conn_ptr, sql);
				result = mysql_store_result(conn_ptr);
				row = mysql_fetch_row(result);
				int i;
				char aaaa[200];
				memset(aaaa, 0, 200);
				strcpy(aaaa, "sigin");
				for (i = 0; i < 6; i++) {
					strcat(aaaa, ":");
					strcat(aaaa, row[i]);
				}
				write(k->fd, aaaa, strlen(aaaa));
				usleep(150000);;
				mysql_free_result(result);

				memset(sql, 0, 300);
				sprintf(sql, "select username,userid,userip,userport,userstatu,usermail from usermsg where userid != %s", k->id);
				mysql_query(conn_ptr, sql);
				result = mysql_store_result(conn_ptr);
				while ((row = mysql_fetch_row(result)) != NULL) {	/*fetching each row */
					int i;
					char sigin[200];
					memset(sigin, 0, 200);
					strcpy(sigin, "sigin");
					for (i = 0; i < 6; i++) {
						strcat(sigin, ":");
						strcat(sigin, row[i]);
					}
					sigin[strlen(sigin)] = '\0';
					write(k->fd, sigin, strlen(sigin));
					usleep(150000);
				}
				usleep(150000);;
				char over[7] = "over";
				write(k->fd, over, strlen(over));
				mysql_free_result(result);
				printf("on\n");
//更新列表
				gdk_threads_enter;
				gtk_list_store_clear((GtkListStore*)store1);
				gtk_tree_view_set_model(GTK_TREE_VIEW(treeview_listfrend), createModel());
				gdk_threads_leave;
			} else {
				printf("ut=\n");
				char ut[10] = "chkoff";
				printf("ut=%s\n", ut);
				write(k->fd, ut, strlen(ut));
			}
		}
			printf("ut111=\n");
//      printf("mysql_ac=%lu\n",mysql_ac);
			mysql_close(conn_ptr);
	}
//sleep(20);
		printf("check_id: %s\n", k->id);
		printf("check_pwd: %s\n", k->pwd);
		printf("check_fd: %d\n", k->fd);
		gdk_threads_leave();
}

/*//+++++++++++++++++++++++++++++++++++++
void create_mysql (void)
{
MYSQL *conn_ptr;
conn_ptr=mysql_init(NULL); 	//连接初始化
	if(!conn_ptr)
	{
	fprintf(stderr, "mysql_init failed\n");
	return EXIT_FAILURE;
	}
	conn_ptr = mysql_real_connect(conn_ptr, "localhost", "root","123456","myqq", 0, NULL, 0);
	//建立实际连接
	if(conn_ptr)
	{
	//	printf("Connection 成功\n");
	}
	else
	{
	printf("Connection 失败\n");
	}
return conn_ptr;
}
*/

//++++++++++++++添加用户+++++++++++++++++++++++
void func_adduser(struct newuser *k)
{
	gdk_threads_enter();
	char sql[300];
	MYSQL *conn_ptr;
	MYSQL_RES *result;	/*result buffer */
	MYSQL_ROW row;		/*one row of the result */
	conn_ptr = mysql_init(NULL);	//连接初始化
	conn_ptr = mysql_real_connect(conn_ptr, "localhost", "root", "123456", "myqq", 0, NULL, 0);
	if (!conn_ptr) {
		char failed[15] = "sqlfailed";
		write(k->addfd, failed, strlen(failed));
	} else {
		sprintf(sql, "insert into usermsg(username,userpwd,userip,userport,userstatu,usermail) values('%s','%s','%s','%s',%d,'%s')", k->addname,k->addpwd, k->addip, k->addport, k->addstatu, k->addmail);
		printf("%s\n", sql);
		mysql_query(conn_ptr, sql);
		unsigned int mysql_ac;
		printf("注册中的mysql_ac=%u\n", mysql_ac);
		mysql_ac = mysql_affected_rows(conn_ptr);
		printf("注册中的%u\n", mysql_ac);
		if (mysql_ac == 1) {
			memset(sql,'\0',300);
			sprintf(sql, "select userid from usermsg where username='%s' and userpwd='%s'", k->addname,k->addpwd);
			mysql_query(conn_ptr,sql);
			result = mysql_store_result(conn_ptr);
			row = mysql_fetch_row(result);	/*fetching each row */
			printf("4%s\n", sql);

			char ut[10] ;
			sprintf(ut,"on:%s",row[0]);
			write(k->addfd,ut, strlen(ut));
			char name[40];
			strcpy(name, k->addname);
			strcat(name, "  :已注册");
//      gdk_threads_enter();
			combochange_log("%s", name);
//s     gdk_threads_leave();

//向客户发送注册用户的信息
			char sigink[100];
			memset(sigink, '\0', 100);
			sprintf(sigink, "sigin:%s:%s:%s:%s:%d:%s",k->addname,row[0], k->addip, k->addport, k->addstatu,k->addmail);
			for (j = 0; j < MAX_CLIENT; j++) {
				if ((user_link[j] == 1) && (userfd[j] != k->addfd)){
					write(userfd[j],sigink, strlen(sigink));
				}
			}
//更新列表
		gdk_threads_enter;
		gtk_list_store_clear((GtkListStore*)store1);
		gtk_tree_view_set_model(GTK_TREE_VIEW(treeview_listfrend), createModel());
		gdk_threads_leave;
		} else {
			char ut[5] = "off";
			write(k->addfd, ut, strlen(ut));
		}
//      printf("mysql_ac=%lu\n",mysql_ac);
		mysql_close(conn_ptr);
	}
	gdk_threads_leave();
}

//+++++++++++++++++++++++++++++++++++++
int user_free(int user_link[MAX_CLIENT])
{
	int i = 0;
	while ((user_link[i] != 0) && (i < MAX_CLIENT))
		i++;
	if (i == MAX_CLIENT)
		return (-1);
	return (i);
}

//+++++++++++++++退出++++++++++++++++++++++
void func_quit(char ipip[40])
{
	gdk_threads_enter();
	char ip[25];
	char port[10];
	int fd;
	char afd[5];
	char *token;
	token = strtok(ipip, ":");
	strcpy(ip, token);
	token = strtok(NULL, ":");
	strcpy(port, token);
	token = strtok(NULL, ":");

	char quit[40];
	strcpy(quit, "quit");
	strcat(quit, ":");
	strcat(quit, ip);
	strcat(quit, ":");
	strcat(quit, port);
	printf("quit=%s\n", quit);
	fd = atoi(token);
	printf("fd=%d\n", fd);
	char sql[300];
	MYSQL *conn_ptr;
	MYSQL_RES *result;	/*result buffer */
	MYSQL_ROW row;		/*one row of the result */

	conn_ptr = mysql_init(NULL);	//连接初始化
	conn_ptr = mysql_real_connect(conn_ptr, "localhost", "root", "123456", "myqq", 0, NULL, 0);
	if (!conn_ptr){
		char failed[15] = "sqlfailed";
		write(fd, failed, strlen(failed));
	} else {
printf("#########\n");
		sprintf(sql, "update usermsg set userstatu=0 where userip='%s' and userport='%s'", ip, port);
		mysql_query(conn_ptr, sql);
printf("!!!!!!!!!\n");
		for (j = 0; j < MAX_CLIENT; j++) {
			if ((user_link[j] == 1) && (userfd[j] != fd)) {
				write(userfd[j],quit, strlen(quit));
				//printf("userfd%d=%d\n",j,userfd[j]);
			}
		}
printf("%%%%%%\n");
		memset(sql, 0, 300);
		sprintf(sql, "select username from usermsg where userip='%s' and userport='%s'", ip, port);
		mysql_query(conn_ptr, sql);
		result = mysql_store_result(conn_ptr);
		row = mysql_fetch_row(result);
		mysql_free_result(result);
		if (row!=0){
			char name[20];
			strcpy(name, row[0]);
			strcat(name, "  :已退出");
//			gdk_threads_enter();
			combochange_log("%s", name);
//			gdk_threads_leave();
		//更新列表
			gdk_threads_enter;
			gtk_list_store_clear((GtkListStore*)store1);
			gtk_tree_view_set_model(GTK_TREE_VIEW(treeview_listfrend), createModel());
			gdk_threads_leave;
		}
	}
	gdk_threads_leave();
}

//+++++++++++++++++++++++++++++++++++++
void go_to(void)
{
	for (;;) {
		n = select(maxfd, &sockset, NULL, NULL, NULL);
		if (FD_ISSET(sockfd, &sockset) && (userCount = user_free(user_link)) >= 0) {
			new_sockfd = accept(sockfd, (struct sockaddr *) &client_address[userCount], &cli_len);
			if (new_sockfd < 0){
				user_link[userCount] = 0;
				printf("无新的连接!\n");
			} else {
				printf("已有新连接\n");
				printf("userCount=%d\n", userCount);
				printf("new_sockfd=%d\n", new_sockfd);
				user_link[userCount] = 1;
				userfd[userCount] = new_sockfd;
				FD_SET(new_sockfd, &sockset);
				maxfd = max(maxfd, new_sockfd + 1);
				printf("userfd[userCount]=%d\n", userfd[userCount]);
				printf("maxfd=%d\n", maxfd);
			}
			add_sockset(&sockset, sockfd, user_link, userfd);
			continue;
		}
		for (i = 0; i < MAX_CLIENT; i++) {
			if ((user_link[i] == 1) && (FD_ISSET(userfd[i], &sockset))) {
				printf("读前\n");
				readcount = read(userfd[i], message, MAX_LINE);
				printf("@@@@@@读后%d\n",readcount);
				if (readcount == 0){
					//当客户端关闭程序时会发一个0过来
					printf("客户%d关闭\n", userfd[i]);
					user_link[i] = 0;
					FD_CLR(userfd[i], &sockset);

					char ipip[40];
					char por[10];
					char fd[5];
					memset(ipip, 0, 40);
					sprintf(ipip, "%s", inet_ntop(AF_INET, &client_address[i].sin_addr, str, sizeof(str)));
					strcat(ipip, ":");
					sprintf(por, "%d", ntohs(client_address[i].sin_port));
					strcat(ipip, por);
					strcat(ipip, ":");
					sprintf(fd, "%d", userfd[i]);
					strcat(ipip, fd);
					printf("ipip=%s\n", ipip);
					g_thread_create(G_THREAD_FUNC(func_quit),ipip, FALSE, NULL);
					bzero((char *)&client_address[i], sizeof(client_address[i]));

					//userfd[i]=NULL;
				} else if (readcount > 0) {
					char *token;
					message[readcount] = '\0';
					token = strtok(message, ":");
//判断如果发过来的是注册字符串进行賳值，发来的顺序不能换，
						if (strcmp(token, "useradd") == 0) {
							printf("进入sueradd:\n");
							//第一个发过来的是昵称
							token = strtok(NULL, ":");
							printf("token=%s\n", token);
							strcpy(newuser[i].addname, token);
							printf("newuser[i].name:%s\n", newuser[i].addname);

							//第二个发过来的是帐号ID
							//token = strtok(NULL, ":");
							//strcpy(newuser[i].addid, token);
							//printf("token=%s\n", token);

							//第三个发过来的是密码
							token = strtok(NULL, ":");
							strcpy(newuser[i].addpwd, token);
							printf("token=%s\n", token);
							//第一个发过来的是电子邮件
							token = strtok(NULL, ":");
							strcpy(newuser[i].addmail, token);
							printf("token=%s\n", token);
							//向存放IP地址的结构体，赋值
							sprintf(newuser[i].addip, "%s", inet_ntop(AF_INET, &client_address[i].sin_addr, str, sizeof(str)));
							printf("token=%s\n", newuser[i].addip);
							sprintf(newuser[i].addport, "%d", ntohs(client_address[i].sin_port));
							printf("token=%s\n", newuser[i].addport);
							newuser[i].addfd = userfd[i];
							newuser[i].addstatu = 0;
							printf("sueradd:\n");
							g_thread_create(G_THREAD_FUNC(func_adduser), &newuser[i], FALSE, NULL);
							//gdk_threads_enter();
							//func_adduser();
							//gdk_threads_leave();
						}
//用户登陆时处理验证信息
						if (strcmp(token, "usercheck") == 0) {
							token = strtok(NULL, ":");
							strcpy(acheck[i].id, token);
							token = strtok(NULL, ":");
							strcpy(acheck[i].pwd, token);

							sprintf(acheck[i].ip, "%s", inet_ntop(AF_INET, &client_address[i].sin_addr, str, sizeof(str)));
							sprintf(acheck[i].port, "%d", ntohs(client_address[i].sin_port));

							acheck[i].fd = userfd[i];
							g_thread_create(G_THREAD_FUNC(func_check), &acheck[i], FALSE, NULL);

						}
						if (strcmp(token, "accet") == 0) {
							printf("%s\n", token);
							write(userfd[i], token, strlen(token));
						}
					}
					
			}
		}
		add_sockset(&sockset, sockfd, user_link, userfd);
	}
}

//+++++++++++++++++++++++++++++++++++++
//函数 最大文件符

int max(int a, int b)
{
	return a > b ? a : b;
}

//函数创建一个文件并绑定
int initial_server(gchar * server_ip, gint server_port)
{
	int sockfd;
	struct sockaddr_in server_address;
	if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
		//printf("服务器不能创建套接字!\n");
		fflush(stdout);
		return (0);
	}
	int opt;
	setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
	bzero((char *)&server_address, sizeof(server_address));
	server_address.sin_family = AF_INET;
	server_address.sin_addr.s_addr = inet_addr(server_ip);
	server_address.sin_port = htons(server_port);
	if (bind(sockfd, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {
		//printf("服务器不能绑定本地IP地址!\n");
		fflush(stdout);
		return (0);
	}
	statu = 0;
	return (sockfd);
}

//+++++++++++++++++++++++++++++++++++++

void go_to_broadcast(void)
{
	gchar *message_txt = (gchar *) gtk_entry_get_text(GTK_ENTRY(allwid.message));
	strcpy(sys, "系统广播：");
	strcat(sys, message_txt);
	gdk_threads_enter();
	combochange_log("%s", sys);
	gdk_threads_leave();
}

//+++++++++++++++++++++++++++++++++++++
void button_message_clicked(GtkWidget * button, gpointer data)
{
	if (sockfd) {
		g_thread_create(G_THREAD_FUNC(go_to_broadcast), NULL, FALSE, NULL);
		int j;
		gchar *message_txt = (gchar *) gtk_entry_get_text(GTK_ENTRY(allwid.message));
		strcpy(sys_click, "系统广播：");
		strcat(sys_click, message_txt);
		for (j = 0; j < MAX_CLIENT; j++) {
			if (user_link[j] == 1) {
				write(userfd[j], sys_click, strlen(sys_click));
				//printf("userfd%d=%d\n",j,userfd[j]);
			}
		}
	}
}

//+++++++++++++++++++++++++++++++++++++
void button_start_clicked(GtkWidget * button, gpointer data)
{
	struct widget_active *tc = &allwid;
//服务器IP地址
	gchar *server_ip = (gchar *) gtk_entry_get_text(GTK_ENTRY(tc->ip));
//监听端口号
	gchar *server_port = (gchar *) gtk_entry_get_text(GTK_ENTRY(tc->port));
	printf("%s\n", server_ip);
	printf("%d\n", atoi(server_port));
	if (statu && (sockfd == 0)){
//已经创建一个文件描述，并绑定
		sockfd = initial_server(server_ip,atoi(server_port));
		if(sockfd!=0){
			char *POPMessage[]={
			"USER myqqmail\r\n",
			"PASS 123456123\r\n",
			"UIDL\r\n",
			"DELE 1\r\n",
			"QUIT\r\n",
			NULL};
			char buf[1024];
			int i,n;
			int num1,num2,num3,num4,num5,num6,num7,num8,num9,num10,num11,num12;
			int sockfd_mail,new_fd,iLength;
			struct sockaddr_in server_mail;
			//struct sockaddr_in client_addr;
			//int sin_size;
			int iMsg=0;
			if((sockfd_mail=socket(AF_INET,SOCK_STREAM,0))==-1){
					perror(" socket error");exit(1);
			}

			server_mail.sin_family=AF_INET;
			server_mail.sin_port=htons(110);
			server_mail.sin_addr.s_addr=inet_addr("123.125.50.23");

			bzero(&(server_mail.sin_zero),8);


			if(connect(sockfd_mail,(struct sockaddr *)(&server_mail),sizeof(struct sockaddr))!=-1){
				iLength=recv(sockfd_mail,buf,sizeof(buf),0);
				buf[iLength]='\0';
				printf("received:%s\n",buf);
				do
				{
					send(sockfd_mail,POPMessage[iMsg],strlen(POPMessage[iMsg]),0);
					printf("发送信息:%s",POPMessage[iMsg]);
					memset(buf,'\0',1024);
					iLength=recv(sockfd_mail,buf,sizeof(buf),0);
					buf[iLength]='\0';
					if(iMsg==2){
						if(strncmp(buf,"+OK 0 0",strlen("+OK 0 0"))==0) break;
					//		if(buf[5]=='0') break;
					}
					iMsg++;
					printf("接收信息:%s\n",buf);
				}while(POPMessage[iMsg]);
				close(sockfd_mail);
				char kkk[100];
				memset(kkk,'\0',100);
				sprintf(kkk,"echo aaa|mutt -s 'myqq:%s:%s:' myqqmail@126.com",server_ip,server_port);
				n=system(kkk);
				if(n==1)
					printf("邮件发送失败\n");
				else
				printf("邮件发送成功\n");
			}
			else{
				perror(" connect error");
			}
			combochange_log("%s","服务器已成功启动");
		}
		setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
		printf("socked=%d\n", sockfd);
		listen(sockfd, MAX_CLIENT);
		cli_len = sizeof(client_address);
		for (i = 0; i < MAX_CLIENT; i++)
			user_link[i] = 0;
		userCount = 0;
		FD_ZERO(&sockset);
		FD_SET(sockfd, &sockset);
		maxfd = max(maxfd, sockfd + 1);
		g_thread_create(G_THREAD_FUNC(go_to), NULL, FALSE, NULL);
	}
}

GtkWidget *create_window(void)
{
	GtkWidget *window_server;
	GtkWidget *hbox1;
	GtkWidget *vbox1;
	GtkWidget *hbox2;
	GtkWidget *asd;
	GtkWidget *entry_server_ip;
	GtkWidget *label2;
	GtkWidget *entry_server_port;
	GtkWidget *label3;
	GtkWidget *button_start;
	GtkWidget *alignment1;
	GtkWidget *hbox5;
	GtkWidget *image1;
	GtkWidget *label11;
	GtkWidget *label4;
	GtkWidget *button_stop;
	GtkWidget *alignment2;
	GtkWidget *hbox6;
	GtkWidget *image2;
	GtkWidget *label12;
	GtkWidget *label5;
	GtkWidget *label6;
	GtkWidget *hbox3;
	GtkWidget *scrolledwindow1;
//	GtkWidget *treeview_listfrend;
	GtkWidget *vbox2;
	GtkWidget *scrolledwindow2;
	GtkWidget *textview_news;
	GtkWidget *hbox4;
	GtkWidget *label7;
	GtkWidget *entry_message;
	GtkWidget *label8;
	GtkWidget *button_message;
	GtkWidget *label9;
	GtkWidget *label10;

	GtkCellRenderer *renderer;
	GtkTreeViewColumn *column;

	window_server = gtk_window_new(GTK_WINDOW_TOPLEVEL);
	gtk_widget_set_size_request(window_server, 439, -1);
	gtk_window_set_title(GTK_WINDOW(window_server), "\345\244\232\344\272\272\350\201\212\345\244\251\346\234\215\345\212\241\345\231\250");
	gtk_window_set_resizable(GTK_WINDOW(window_server), FALSE);
	g_signal_connect(G_OBJECT(window_server), "delete_event", G_CALLBACK(gtk_main_quit), NULL);
	hbox1 = gtk_hbox_new(FALSE, 0);
	gtk_widget_show(hbox1);
	gtk_container_add(GTK_CONTAINER(window_server), hbox1);

	vbox1 = gtk_vbox_new(FALSE, 0);
	gtk_widget_show(vbox1);
	gtk_box_pack_start(GTK_BOX(hbox1), vbox1, TRUE, TRUE, 0);

	hbox2 = gtk_hbox_new(FALSE, 0);
	gtk_widget_show(hbox2);
	gtk_box_pack_start(GTK_BOX(vbox1), hbox2, TRUE, TRUE, 0);

	asd = gtk_label_new(" IP: ");
	gtk_widget_show(asd);
	gtk_box_pack_start(GTK_BOX(hbox2), asd, FALSE, FALSE, 0);

//eytry_server_ip文本框

	entry_server_ip = gtk_entry_new();
	gtk_widget_show(entry_server_ip);
	gtk_box_pack_start(GTK_BOX(hbox2), entry_server_ip, TRUE, TRUE, 0);
	gtk_entry_set_max_length(GTK_ENTRY(entry_server_ip), 16);
	gtk_entry_set_invisible_char(GTK_ENTRY(entry_server_ip), 8226);

	label2 = gtk_label_new("\347\253\257\345\217\243\345\217\267\357\274\232");
	gtk_widget_show(label2);
	gtk_box_pack_start(GTK_BOX(hbox2), label2, FALSE, FALSE, 0);

//entry_port文本框

	entry_server_port = gtk_entry_new();
	gtk_widget_show(entry_server_port);
	gtk_box_pack_start(GTK_BOX(hbox2), entry_server_port, TRUE, TRUE, 0);
	gtk_entry_set_max_length(GTK_ENTRY(entry_server_port), 5);
	gtk_entry_set_invisible_char(GTK_ENTRY(entry_server_port), 8226);

	label3 = gtk_label_new(" ");
	gtk_widget_show(label3);
	gtk_box_pack_start(GTK_BOX(hbox2), label3, FALSE, FALSE, 0);

//启动按钮 button_start

	button_start = gtk_button_new();
	gtk_widget_show(button_start);
	gtk_box_pack_start(GTK_BOX(hbox2), button_start, FALSE, FALSE, 0);

	alignment1 = gtk_alignment_new(0.5, 0.5, 0, 0);
	gtk_widget_show(alignment1);
	gtk_container_add(GTK_CONTAINER(button_start), alignment1);

	hbox5 = gtk_hbox_new(FALSE, 2);
	gtk_widget_show(hbox5);
	gtk_container_add(GTK_CONTAINER(alignment1), hbox5);

	image1 = gtk_image_new_from_stock("gtk-yes", GTK_ICON_SIZE_BUTTON);
	gtk_widget_show(image1);
	gtk_box_pack_start(GTK_BOX(hbox5), image1, FALSE, FALSE, 0);

	label11 = gtk_label_new_with_mnemonic("\345\274\200\345\220\257 ");
	gtk_widget_show(label11);
	gtk_box_pack_start(GTK_BOX(hbox5), label11, FALSE, FALSE, 0);

	label4 = gtk_label_new("");
	gtk_widget_show(label4);
	gtk_box_pack_start(GTK_BOX(hbox2), label4, FALSE, FALSE, 0);

//停止按钮button_stop

	button_stop = gtk_button_new();
	gtk_widget_show(button_stop);
	gtk_box_pack_start(GTK_BOX(hbox2), button_stop, FALSE, FALSE, 0);

	alignment2 = gtk_alignment_new(0.5, 0.5, 0, 0);
	gtk_widget_show(alignment2);
	gtk_container_add(GTK_CONTAINER(button_stop), alignment2);

	hbox6 = gtk_hbox_new(FALSE, 2);
	gtk_widget_show(hbox6);
	gtk_container_add(GTK_CONTAINER(alignment2), hbox6);

	image2 = gtk_image_new_from_stock("gtk-no", GTK_ICON_SIZE_BUTTON);
	gtk_widget_show(image2);
	gtk_box_pack_start(GTK_BOX(hbox6), image2, FALSE, FALSE, 0);

	label12 = gtk_label_new_with_mnemonic(" \345\205\263\351\227\255 ");
	gtk_widget_show(label12);
	gtk_box_pack_start(GTK_BOX(hbox6), label12, FALSE, FALSE, 0);

	label5 = gtk_label_new(" ");
	gtk_widget_show(label5);
	gtk_box_pack_start(GTK_BOX(hbox2), label5, FALSE, FALSE, 0);

	label6 = gtk_label_new("");
	gtk_widget_show(label6);
	gtk_box_pack_start(GTK_BOX(vbox1), label6, FALSE, FALSE, 0);

	hbox3 = gtk_hbox_new(FALSE, 0);
	gtk_widget_show(hbox3);
	gtk_box_pack_start(GTK_BOX(vbox1), hbox3, TRUE, TRUE, 0);

	scrolledwindow1 = gtk_scrolled_window_new(NULL, NULL);
	gtk_widget_show(scrolledwindow1);
	gtk_box_pack_start(GTK_BOX(hbox3), scrolledwindow1, TRUE, TRUE, 0);
	gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scrolledwindow1), GTK_POLICY_NEVER, GTK_POLICY_AUTOMATIC);
	gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(scrolledwindow1), GTK_SHADOW_IN);

//左边好友列表

//	treeview_listfrend = gtk_tree_view_new_with_model(createModel());

	treeview_listfrend = gtk_tree_view_new();
	gtk_tree_view_set_model(GTK_TREE_VIEW(treeview_listfrend),(GtkTreeModel *) createModel());

	gtk_widget_show(treeview_listfrend);
	gtk_container_add(GTK_CONTAINER(scrolledwindow1), treeview_listfrend);
	gtk_widget_set_size_request(treeview_listfrend, 177, 369);

//treeView = gtk_tree_view_new_with_model(createModel());
//改
//	renderer = gtk_cell_renderer_pixbuf_new();
	renderer = gtk_cell_renderer_text_new();
//改
//	column = gtk_tree_view_column_new_with_attributes("好友列表", renderer, "pixbuf", PIXBUF_COL, NULL);
	column = gtk_tree_view_column_new_with_attributes("好友列表", renderer, "text",PIXBUF_COL, NULL);
	gtk_tree_view_append_column(GTK_TREE_VIEW(treeview_listfrend), column);

	renderer = gtk_cell_renderer_text_new();
	column = gtk_tree_view_column_new_with_attributes("            ", renderer, "text", TEXT_COL, NULL);
	gtk_tree_view_append_column(GTK_TREE_VIEW(treeview_listfrend), column);

	vbox2 = gtk_vbox_new(FALSE, 0);
	gtk_widget_show(vbox2);
	gtk_box_pack_start(GTK_BOX(hbox3), vbox2, TRUE, TRUE, 0);

	scrolledwindow2 = gtk_scrolled_window_new(NULL, NULL);
	gtk_widget_show(scrolledwindow2);
	gtk_box_pack_start(GTK_BOX(vbox2), scrolledwindow2, TRUE, TRUE, 0);
	gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scrolledwindow2), GTK_POLICY_NEVER, GTK_POLICY_AUTOMATIC);
	gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(scrolledwindow2), GTK_SHADOW_IN);

//右边消息窗口

	textview_news = gtk_text_view_new();
	gtk_widget_show(textview_news);
	gtk_container_add(GTK_CONTAINER(scrolledwindow2), textview_news);
	gtk_widget_set_size_request(textview_news, -1, 356);
	gtk_text_view_set_editable(GTK_TEXT_VIEW(textview_news), FALSE);
	hbox4 = gtk_hbox_new(FALSE, 0);
	gtk_widget_show(hbox4);
	gtk_box_pack_start(GTK_BOX(vbox2), hbox4, TRUE, TRUE, 0);

	label7 = gtk_label_new("\347\263\273\347\273\237\346\266\210\346\201\257");
	gtk_widget_show(label7);
	gtk_box_pack_start(GTK_BOX(hbox4), label7, FALSE, FALSE, 0);

//系统广播文件框

	entry_message = gtk_entry_new();
	gtk_widget_show(entry_message);
	gtk_box_pack_start(GTK_BOX(hbox4), entry_message, TRUE, TRUE, 0);
	gtk_entry_set_invisible_char(GTK_ENTRY(entry_message), 8226);

	label8 = gtk_label_new("");
	gtk_widget_show(label8);
	gtk_box_pack_start(GTK_BOX(hbox4), label8, FALSE, FALSE, 0);

//系统广播按钮

	button_message = gtk_button_new_with_mnemonic("\345\271\277\346\222\255\346\266\210\346\201\257");
	gtk_widget_show(button_message);
	gtk_box_pack_start(GTK_BOX(hbox4), button_message, FALSE, FALSE, 0);

	label9 = gtk_label_new("");
	gtk_widget_show(label9);
	gtk_box_pack_start(GTK_BOX(hbox4), label9, FALSE, FALSE, 0);

	label10 = gtk_label_new("");
	gtk_widget_show(label10);
	gtk_box_pack_start(GTK_BOX(vbox1), label10, FALSE, FALSE, 0);

	allwid.ip = GTK_ENTRY(entry_server_ip);
	allwid.port = GTK_ENTRY(entry_server_port);
	allwid.listfrend = treeview_listfrend;
	allwid.text_view = textview_news;
	allwid.message = GTK_ENTRY(entry_message);

//所有系统按钮调用
	g_signal_connect(G_OBJECT(button_start), "clicked", G_CALLBACK(button_start_clicked), NULL);
	g_signal_connect(G_OBJECT(button_message), "clicked", G_CALLBACK(button_message_clicked), NULL);
	g_signal_connect(G_OBJECT(button_stop), "clicked", G_CALLBACK(gtk_main_quit), NULL);

	return window_server;
}
